{
  "contractName": "BadTransaction",
  "abi": [
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{},\"notice\":\"A contract that has a transaction that will throw.\"}},\"settings\":{\"compilationTarget\":{\"/Users/sh/Dev/authereumorg/authereum/monorepo/packages/contracts/contracts/test/BadTransaction.sol\":\"BadTransaction\"},\"evmVersion\":\"constantinople\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/sh/Dev/authereumorg/authereum/monorepo/packages/contracts/contracts/test/BadTransaction.sol\":{\"keccak256\":\"0x60a13cf37335ad8419db3e643922ea19993b6244f8b356afeeb022ee64c8191c\",\"urls\":[\"bzzr://3c93b3935573b93cf3e63552882d8a464bdc5fba01cb1026ed42e3a9d58f33f9\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060a88061001f6000396000f3fe60806040526002600114607a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f57696c6c206661696c000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b00fea165627a7a7230582039b5bfbe419ff3e7762b598167a7dec20bd1f81a7f37cbef8a77207f0475b0460029",
  "deployedBytecode": "0x60806040526002600114607a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f57696c6c206661696c000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b00fea165627a7a7230582039b5bfbe419ff3e7762b598167a7dec20bd1f81a7f37cbef8a77207f0475b0460029",
  "sourceMap": "87:106:12:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;87:106:12;;;;;;;",
  "deployedSourceMap": "87:106:12:-;;;169:1;164;:6;156:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;87:106",
  "source": "pragma solidity ^0.5.8;\n\n/**\n * A contract that has a transaction that will throw.\n */\ncontract BadTransaction {\n    function () external payable {\n        require(1 == 2, \"Will fail\");\n    }\n}\n",
  "sourcePath": "/Users/sh/Dev/authereumorg/authereum/monorepo/packages/contracts/contracts/test/BadTransaction.sol",
  "ast": {
    "absolutePath": "/Users/sh/Dev/authereumorg/authereum/monorepo/packages/contracts/contracts/test/BadTransaction.sol",
    "exportedSymbols": {
      "BadTransaction": [
        2174
      ]
    },
    "id": 2175,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2162,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:12"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "A contract that has a transaction that will throw.",
        "fullyImplemented": true,
        "id": 2174,
        "linearizedBaseContracts": [
          2174
        ],
        "name": "BadTransaction",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2172,
              "nodeType": "Block",
              "src": "146:45:12",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "id": 2168,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 2166,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "164:1:12",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "32",
                          "id": 2167,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "169:1:12",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_2_by_1",
                            "typeString": "int_const 2"
                          },
                          "value": "2"
                        },
                        "src": "164:6:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "57696c6c206661696c",
                        "id": 2169,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "172:11:12",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_554446f4ad0bc829e465f1030e6222b9bdfd1428316e9eb4db02ae81c703712c",
                          "typeString": "literal_string \"Will fail\""
                        },
                        "value": "Will fail"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_554446f4ad0bc829e465f1030e6222b9bdfd1428316e9eb4db02ae81c703712c",
                          "typeString": "literal_string \"Will fail\""
                        }
                      ],
                      "id": 2165,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4918,
                        4919
                      ],
                      "referencedDeclaration": 4919,
                      "src": "156:7:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2170,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "156:28:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2171,
                  "nodeType": "ExpressionStatement",
                  "src": "156:28:12"
                }
              ]
            },
            "documentation": null,
            "id": 2173,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2163,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "126:2:12"
            },
            "returnParameters": {
              "id": 2164,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "146:0:12"
            },
            "scope": 2174,
            "src": "117:74:12",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 2175,
        "src": "87:106:12"
      }
    ],
    "src": "0:194:12"
  },
  "legacyAST": {
    "absolutePath": "/Users/sh/Dev/authereumorg/authereum/monorepo/packages/contracts/contracts/test/BadTransaction.sol",
    "exportedSymbols": {
      "BadTransaction": [
        2174
      ]
    },
    "id": 2175,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 2162,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".8"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:12"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": "A contract that has a transaction that will throw.",
        "fullyImplemented": true,
        "id": 2174,
        "linearizedBaseContracts": [
          2174
        ],
        "name": "BadTransaction",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 2172,
              "nodeType": "Block",
              "src": "146:45:12",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        },
                        "id": 2168,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "hexValue": "31",
                          "id": 2166,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "164:1:12",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "32",
                          "id": 2167,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "169:1:12",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_2_by_1",
                            "typeString": "int_const 2"
                          },
                          "value": "2"
                        },
                        "src": "164:6:12",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "57696c6c206661696c",
                        "id": 2169,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "172:11:12",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_554446f4ad0bc829e465f1030e6222b9bdfd1428316e9eb4db02ae81c703712c",
                          "typeString": "literal_string \"Will fail\""
                        },
                        "value": "Will fail"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_554446f4ad0bc829e465f1030e6222b9bdfd1428316e9eb4db02ae81c703712c",
                          "typeString": "literal_string \"Will fail\""
                        }
                      ],
                      "id": 2165,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        4918,
                        4919
                      ],
                      "referencedDeclaration": 4919,
                      "src": "156:7:12",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 2170,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "156:28:12",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 2171,
                  "nodeType": "ExpressionStatement",
                  "src": "156:28:12"
                }
              ]
            },
            "documentation": null,
            "id": 2173,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 2163,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "126:2:12"
            },
            "returnParameters": {
              "id": 2164,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "146:0:12"
            },
            "scope": 2174,
            "src": "117:74:12",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 2175,
        "src": "87:106:12"
      }
    ],
    "src": "0:194:12"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.11",
  "updatedAt": "2019-08-03T02:41:48.307Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {},
    "notice": "A contract that has a transaction that will throw."
  }
}